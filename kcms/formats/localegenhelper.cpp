/*
    localegenhelper.cpp
    SPDX-FileCopyrightText: 2021 Han Young <hanyoung@protonmail.com>

    SPDX-License-Identifier: GPL-2.0-or-later
*/
#include "localegenhelper.h"
#include "localegenhelperadaptor.h"

#include <set>
#include <QDBusConnection>
#include <QDebug>
#include <QFile>
#include <QTimer>

LocaleGenHelper::LocaleGenHelper()
{
    new LocalegenhelperAdaptor(this);
    if (!QDBusConnection::systemBus().registerService(QStringLiteral("org.kde.localegenhelper"))) {
        qDebug() << "another helper is already running";
        QCoreApplication::instance()->quit();
    }
    if (!QDBusConnection::systemBus().registerObject(QStringLiteral("/"), this)) {
        qDebug() << "unable to register service interface to dbus";
        QCoreApplication::instance()->quit();
    }
    m_authority = PolkitQt1::Authority::instance();
    connect(m_authority, &PolkitQt1::Authority::checkAuthorizationFinished, this, &LocaleGenHelper::enableLocalesPrivate);
}

void LocaleGenHelper::enableLocales(const QStringList &locales, qint64 pid)
{
    m_locales = locales;
    m_authority->checkAuthorization(QStringLiteral("org.kde.foo.enablelocales"), PolkitQt1::UnixSessionSubject(pid), PolkitQt1::Authority::AllowUserInteraction);
}

void LocaleGenHelper::enableLocalesPrivate(PolkitQt1::Authority::Result result)
{
    if (result != PolkitQt1::Authority::Result::Yes || !editLocaleGen()) {
        Q_EMIT success(false);
        exitAfterTimeOut();
    }
}

bool LocaleGenHelper::editLocaleGen()
{
    QFile localegen(QStringLiteral("/etc/locale.gen"));
    if (!localegen.open(QIODevice::ReadWrite | QIODevice::Append)) {
        return false;
    }
    std::set<QString> alreadyEnabled;
    while (!localegen.atEnd()) {
        QString locale = localegen.readLine().simplified();
        if (locale.isEmpty() || locale.front() == QLatin1Char('#')) {
            continue;
        }
        QStringList localeAndCharset = locale.split(QLatin1Char(' '));
        if (localeAndCharset.size() != 2 || localeAndCharset.at(1) != QStringLiteral("UTF-8")) {
            continue;
        } else {
            alreadyEnabled.insert(localeAndCharset.front());
        }
    }

    bool require_regenerate = false;
    for (const auto &locale : std::as_const(m_locales)) {
        if (alreadyEnabled.count(locale)) {
            continue;
        } else {
            // start at newline first time
            if (!require_regenerate) {
                localegen.write("\n# generated by KDE Plasma Region & Language KCM\n");
            }
            localegen.write(locale.toUtf8() + ".UTF-8 UTF-8\n");
            require_regenerate = true;
        }
    }

    if (require_regenerate) {
        QProcess *process = new QProcess(this);
        process->setProgram(QStringLiteral("locale-gen"));
        connect(process, QOverload<int, QProcess::ExitStatus>::of(&QProcess::finished), this, &LocaleGenHelper::handleLocaleGen);
    } else {
        Q_EMIT success(true);
        exitAfterTimeOut();
    }

    return true;
}

void LocaleGenHelper::handleLocaleGen(int statusCode, QProcess::ExitStatus status)
{
    Q_UNUSED(status)
    if (statusCode == 0) {
        Q_EMIT success(true);
    } else {
        Q_EMIT success(false);
    }
    exitAfterTimeOut();
}

void LocaleGenHelper::exitAfterTimeOut()
{
    QTimer *timer = new QTimer(this);
    timer->setInterval(30 * 1000);
    connect(timer, &QTimer::timeout, this, []{QCoreApplication::instance()->exit();});
    timer->start();
}
